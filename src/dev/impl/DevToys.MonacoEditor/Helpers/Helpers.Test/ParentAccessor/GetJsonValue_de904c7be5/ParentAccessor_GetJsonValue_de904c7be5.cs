// Test generated by RoostGPT for test Csharp-dev-toys using AI Type Azure Open AI and AI Model roost-gpt

using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Reflection;
using Newtonsoft.Json;

namespace DevToys.MonacoEditor.Helpers
{
    [TestFixture]
    public class ParentAccessorTests
    {
        [Test]
        public void TestParentAccessor_GetJsonValue_WhenParentIsNull_ReturnsEmptyJson()
        {
            // Arrange
            ParentAccessor parentAccessor = new ParentAccessor(null, null);
            string name = "propertyName";

            // Act
            string result = parentAccessor.GetJsonValue(name);

            // Assert
            Assert.AreEqual("{}", result);
        }

        [Test]
        public void TestParentAccessor_GetJsonValue_WhenParentIsNotNull_ReturnsSerializedValue()
        {
            // Arrange
            IParentAccessorAcceptor parent = new ParentAccessorAcceptor();
            ParentAccessor parentAccessor = new ParentAccessor(parent, typeof(IParentAccessorAcceptor));
            parent.SetValue("propertyName", "propertyValue");
            string name = "propertyName";

            // Act
            string result = parentAccessor.GetJsonValue(name);

            // Assert
            Assert.AreEqual("\"propertyValue\"", result);
        }
    }

    public interface IParentAccessorAcceptor
    {
        void SetValue(string name, object? value);
    }

    public class ParentAccessor : IParentAccessorAcceptor
    {
        private readonly WeakReference<IParentAccessorAcceptor> parent;
        private readonly Type typeinfo;

        public ParentAccessor(IParentAccessorAcceptor? parentAccessor, Type typeinfo)
        {
            this.parent = new WeakReference<IParentAccessorAcceptor>(parentAccessor);
            this.typeinfo = typeinfo;
        }

        public void SetValue(string name, object? value)
        {
            if (parent.TryGetTarget(out IParentAccessorAcceptor target))
            {
                PropertyInfo? propinfo = typeinfo.GetProperty(name);
                propinfo?.SetValue(target, value);
            }
        }

        public string GetJsonValue(string name)
        {
            if (parent.TryGetTarget(out IParentAccessorAcceptor tobj))
            {
                PropertyInfo? propinfo = typeinfo.GetProperty(name);
                object? obj = propinfo?.GetValue(tobj);

                return JsonConvert.SerializeObject(obj, new JsonSerializerSettings()
                {
                    NullValueHandling = NullValueHandling.Ignore
                });
            }

            return "{}";
        }
    }

    public class ParentAccessorAcceptor : IParentAccessorAcceptor
    {
        private IDictionary<string, object?> properties = new Dictionary<string, object?>();

        public void SetValue(string name, object? value)
        {
            properties[name] = value;
        }
    }
}
