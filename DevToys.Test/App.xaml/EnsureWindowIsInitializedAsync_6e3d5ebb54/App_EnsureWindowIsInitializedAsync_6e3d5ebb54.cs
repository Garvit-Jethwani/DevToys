// Test generated by RoostGPT for test Csharp-dev-toys using AI Type Open AI and AI Model gpt-3.5-turbo-0301

using NUnit.Framework;
using System.Threading.Tasks;

namespace DevToys
{
    [TestFixture]
    public class EnsureWindowIsInitializedAsyncTest
    {
        [Test]
        public async void TestApp_EnsureWindowIsInitializedAsync_WithValidInput_ReturnsFrame()
        {
            //Arrange
            var expected = new Frame();

            //Act
            var actual = await EnsureWindowIsInitializedAsync();

            //Assert
            Assert.AreEqual(expected, actual);
        }

        [Test]
        public async void TestApp_EnsureWindowIsInitializedAsync_WithInvalidInput_ReturnsNull()
        {
            //Arrange
            var expected = null;

            //Act
            var actual = await EnsureWindowIsInitializedAsync();

            //Assert
            Assert.AreEqual(expected, actual);
        }

        private async Task<Frame> EnsureWindowIsInitializedAsync()
        {
            var applicationView = ApplicationView.GetForCurrentView();
            applicationView.SetPreferredMinSize(new Windows.Foundation.Size(500, 500));

            // Do not repeat app initialization when the Window already has content,
            // just ensure that the window is active
            if (Window.Current.Content is not Frame rootFrame)
            {
                // Create a Frame to act as the navigation context and navigate to the first page
                rootFrame = new Frame
                {
                    CacheSize = 10
                };
                rootFrame.NavigationFailed += OnNavigationFailed;

                // Place the frame in the current Window
                Window.Current.Content = rootFrame;
            }

            // Set the user-defined language.
            string? languageIdentifier = (await _mefComposer).ExportProvider.GetExport<ISettingsProvider>().GetSetting(PredefinedSettings.Language);
            LanguageDefinition languageDefinition
                = LanguageManager.Instance.AvailableLanguages.FirstOrDefault(l => string.Equals(l.InternalName, languageIdentifier))
                ?? LanguageManager.Instance.AvailableLanguages[0];
            LanguageManager.Instance.SetCurrentCulture(languageDefinition);

            // Apply the app color theme.
            (await _themeListener.GetValueAsync()).ApplyDesiredColorTheme();

            // Change the text editor font if the current font isn't available on the system.
            ValidateDefaultTextEditorFontAsync().Forget();

            return rootFrame;
        }
    }
}
