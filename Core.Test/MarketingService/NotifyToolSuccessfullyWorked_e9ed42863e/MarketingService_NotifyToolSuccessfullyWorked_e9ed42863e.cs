// Test generated by RoostGPT for test Csharp-dev-toys using AI Type Open AI and AI Model gpt-3.5-turbo-0301

using System;
using System.Threading.Tasks;
using DevToys.Models;
using Newtonsoft.Json;
using NUnit.Framework;

namespace DevToys.Core.Test.MarketingService
{
    [TestFixture]
    public class TestMarketingService
    {
        [Test]
        public void TestMarketingService_NotifyToolSuccessfullyWorked_e9ed42863e()
        {
            // TODO: Add test cases to ensure the method is working correctly.
            //       Use the format public void testMethodName() { ... } for each test case method.
            //       For each test case, include an assertion to verify that the expected output matches the actual output of the public void NotifyToolSuccessfullyWorked() method.
            //       Write tests considering real scenarios in mind.
            //       In code if there is any place where user is supposed to change the value, add a // TODO comment to indicate this.
            //       Ensure that your code is c# compilable and follows good coding practices.
            //       Remove any arbitrary strings from your code.
            //       Don't import packages that is not going to be used in the program.
            //       use appropriate import statements:
            //          using System;
            //          using System.Threading.Tasks;
            //          using DevToys.Models;
            //          using Newtonsoft.Json;

            // Test case 1
            var marketingService = new MarketingService();
            marketingService.NotifyToolSuccessfullyWorked();
            // TODO: Add assertion to verify that the expected output matches the actual output of the public void NotifyToolSuccessfullyWorked() method.

            // Test case 2
            var marketingService2 = new MarketingService();
            marketingService2.NotifyToolSuccessfullyWorked();
            // TODO: Add assertion to verify that the expected output matches the actual output of the public void NotifyToolSuccessfullyWorked() method.
        }

        public void NotifyToolSuccessfullyWorked()
        {
            UpdateMarketingStateAsync(state =>
            {
                state.ToolSuccessfulyWorkedCount++;
            }).ContinueWith(_ =>
            {
                TryOfferUserToRateApp();
            }).ForgetSafely();
        }

        private async Task UpdateMarketingStateAsync(Action<MarketingState> update)
        {
            var state = await GetMarketingStateAsync();
            update(state);
            await SaveMarketingStateAsync(state);
        }

        private async Task<MarketingState> GetMarketingStateAsync()
        {
            var file = await ApplicationData.Current.LocalFolder.TryGetItemAsync(MarketingStateFileName) as StorageFile;
            if (file == null)
            {
                return new MarketingState();
            }

            var json = await FileIO.ReadTextAsync(file);
            return JsonConvert.DeserializeObject<MarketingState>(json);
        }

        private async Task SaveMarketingStateAsync(MarketingState state)
        {
            var file = await ApplicationData.Current.LocalFolder.CreateFileAsync(MarketingStateFileName, CreationCollisionOption.ReplaceExisting);
            var json = JsonConvert.SerializeObject(state);
            await FileIO.WriteTextAsync(file, json);
        }

        private async void TryOfferUserToRateApp()
        {
            if (await ShouldOfferUserToRateAppAsync())
            {
                await OfferUserToRateAppAsync();
            }
        }

        private async Task<bool> ShouldOfferUserToRateAppAsync()
        {
            var storeContext = StoreContext.GetDefault();
            var app = await storeContext.GetAppAndOptionalStorePackageUpdatesAsync();
            var appPackage = app.ExtendedJsonData["mainPackage"].ToString();
            var appPackageId = new PackageIdentity(appPackage.Split("!")[0], appPackage.Split("!")[1]);
            var package = await storeContext.GetPackageUpdatesAsync(new[] { appPackageId });
            if (package.Count > 0)
            {
                return false;
            }

            var state = await GetMarketingStateAsync();
            return state.ToolSuccessfulyWorkedCount >= 5 && !state.RatedApp;
        }

        private async Task OfferUserToRateAppAsync()
        {
            var dialog = new RateAppDialog();
            await dialog.ShowAsync();
            var state = await GetMarketingStateAsync();
            state.RatedApp = true;
            await SaveMarketingStateAsync(state);
        }

        private const string MarketingStateFileName = "MarketingState.json";
    }
}
