// Test generated by RoostGPT for test Csharp-dev-toys using AI Type Open AI and AI Model gpt-3.5-turbo-0301

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Windows.Storage;
using Windows.System;
using NUnit.Framework;

namespace DevToys.Core.Tests
{
    public class LoggerTests
    {
        private const string FeatureName = "TestFeature";
        private const string CustomMessage = "TestMessage";
        private static SemaphoreSlim _semaphore = new SemaphoreSlim(1);

        private const string LogFileName = "log.txt";

        [Test]
        public async Task TestLogger_LogFaultAsync_165a63f9c0()
        {
            // Test case 1: Test logging without exception
            Exception ex = null;
            await LogFaultAsync(FeatureName, ex, CustomMessage);

            StorageFolder localCacheFolder = ApplicationData.Current.LocalCacheFolder;
            StorageFile logFile = await localCacheFolder.GetFileAsync(LogFileName);
            IReadOnlyList<string> lines = await FileIO.ReadLinesAsync(logFile);

            Assert.AreEqual("# - [" + DateTime.Now.ToString("G", DateTimeFormatInfo.InvariantInfo) + "]", lines[0]);
            Assert.AreEqual("Feature name: " + FeatureName, lines[1]);
            Assert.AreEqual("Custom message: " + CustomMessage, lines[2]);
            Assert.AreEqual(string.Empty, lines[3]);

            // Test case 2: Test logging with exception
            ex = new Exception("TestException");
            await LogFaultAsync(FeatureName, ex, CustomMessage);

            localCacheFolder = ApplicationData.Current.LocalCacheFolder;
            logFile = await localCacheFolder.GetFileAsync(LogFileName);
            lines = await FileIO.ReadLinesAsync(logFile);

            Assert.AreEqual("# - [" + DateTime.Now.ToString("G", DateTimeFormatInfo.InvariantInfo) + "]", lines[4]);
            Assert.AreEqual("Feature name: " + FeatureName, lines[5]);
            Assert.AreEqual("Custom message: " + CustomMessage, lines[6]);
            Assert.AreEqual("Exception message: TestException", lines[7]);
            Assert.AreEqual("Exception stack trace:", lines[8]);
            Assert.AreEqual(ex.StackTrace, lines[9]);
            Assert.AreEqual(string.Empty, lines[10]);
        }

        private static async Task LogFaultAsync(string featureName, Exception? ex, string? message)
        {
            await TaskScheduler.Default;

            try
            {
                using (await _semaphore.WaitAsync(CancellationToken.None))
                {
                    StorageFolder localCacheFolder = ApplicationData.Current.LocalCacheFolder;

                    StorageFile logFile = await localCacheFolder.CreateFileAsync(LogFileName, CreationCollisionOption.OpenIfExists);

                    if (ex is null)
                    {
                        var logsLine = new List<string>
                        {
                            $"# - [{DateTime.Now.ToString("G", DateTimeFormatInfo.InvariantInfo)}]",
                            $"Feature name: {featureName}",
                            $"Custom message: {message ?? string.Empty}",
                            string.Empty // empty line
                        };

                        await FileIO.AppendLinesAsync(logFile, logsLine);
                    }
                    else
                    {
                        var logsLine = new List<string>
                        {
                            $"# - [{DateTime.Now.ToString("G", DateTimeFormatInfo.InvariantInfo)}]",
                            $"Feature name: {featureName}",
                            $"Custom message: {message ?? string.Empty}",
                            $"Exception message: {ex.Message}",
                            $"Exception stack trace:",
                            ex.StackTrace,
                            string.Empty // empty line
                        };

                        await FileIO.AppendLinesAsync(logFile, logsLine);
                    }
                }
            }
            catch (Exception)
            {
            }
        }
    }
}
